name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install Packaging.Targets
        run: dotnet add package Packaging.Targets

      - name: Install dotnet-deb-tool
        run: dotnet tool install --global dotnet-deb

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Build DEB (Linux)
        run: |
          dotnet deb install
          VERSION=${GITHUB_REF#refs/tags/v}
          dotnet deb -c Release -r linux-x64 -o publish --version $VERSION
          chmod +x publish/ImagoCrafter
      
      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: ImagoCrafter.deb
          path: publish/*.deb

  build-rpm:
    name: Build RPM Package
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    steps:
      - uses: actions/checkout@v3

      - name: Install .NET
        run: |
          dnf install -y wget
          dnf install -y findutils
          wget https://dot.net/v1/dotnet-install.sh
          chmod +x dotnet-install.sh
          ./dotnet-install.sh --channel 8.0
          echo "$HOME/.dotnet" >> $GITHUB_PATH

      - name: Install Packaging.Targets
        run: dotnet add package Packaging.Targets
      
      - name: Install dotnet-rpm-tool
        run: dotnet tool install --global dotnet-rpm

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Build RPM (Linux)
        run: |
          dotnet rpm install
          VERSION=${GITHUB_REF#refs/tags/v}
          dotnet rpm -c Release -r linux-x64 -o publish --version $VERSION
          chmod +x publish/ImagoCrafter
      
      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: ImagoCrafter.rpm
          path: publish/*.rpm

  build-windows:
    name: Build Windows EXE
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build Windows EXE
        run: dotnet publish -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish

      - name: Set file properties
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path publish -Filter *.exe -Recurse
          foreach ($file in $files) {
            Write-Host "Setting properties for $($file.FullName)"
            $file.VersionInfo
          }
      
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: ImagoCrafter.exe
          path: publish/*.exe

  build-macos:
    name: Build macOS DMG
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build DMG (macOS)
        run: |
          dotnet publish -c Release -r osx-x64 --self-contained true -p:PublishSingleFile=true -o temp

          mkdir -p ImagoCrafter.app/Contents/MacOS
          mkdir -p ImagoCrafter.app/Contents/Resources
          
          cat > ImagoCrafter.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>ImagoCrafter</string>
              <key>CFBundleIconFile</key>
              <string>AppIcon</string>
              <key>CFBundleIdentifier</key>
              <string>com.dvmizew.imagocrafter</string>
              <key>CFBundleInfoDictionaryVersion</key>
              <string>6.0</string>
              <key>CFBundleName</key>
              <string>ImagoCrafter</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
          </dict>
          </plist>
          EOF
          
          EXE_NAME=$(find temp -type f -not -name "*.pdb" -not -name "*.dll" -exec file {} \; | grep -i executable | cut -d':' -f1)
          echo "Executable found: $EXE_NAME"
          cp "$EXE_NAME" ImagoCrafter.app/Contents/MacOS/ImagoCrafter
          chmod +x ImagoCrafter.app/Contents/MacOS/ImagoCrafter
          
          npm install -g create-dmg
          create-dmg --app-drop-link 380 120 --icon "ImagoCrafter" 200 120 --window-size 600 400 ImagoCrafter.app osx-dmg

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ImagoCrafter.dmg
          path: osx-dmg/*.dmg

  release:
    name: Create Release
    needs: [build-deb, build-rpm, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List files
        run: find . -type f | sort
        
      - name: Verify artifact contents
        run: |
          echo "Windows executable files:"
          find ImagoCrafter.exe -type f
          echo "Linux DEB files:"
          find ImagoCrafter.deb -type f
          echo "Linux RPM files:"
          find ImagoCrafter.rpm -type f
          echo "macOS DMG files:"
          find ImagoCrafter.dmg -type f

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ImagoCrafter v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            ImagoCrafter.exe/*.exe
            ImagoCrafter.deb/*.deb
            ImagoCrafter.dmg/*.dmg
            ImagoCrafter.rpm/*.rpm